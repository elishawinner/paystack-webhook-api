name: Laravel API Deployment Pipeline (Laravel 10+)

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  APP_ENV: production
  APP_DEBUG: false
  PRIMARY_DOMAIN: ${{ secrets.PRIMARY_DOMAIN }}
  APP_SUBDOMAIN: ${{ secrets.APP_SUBDOMAIN }}
  DB_CONNECTION: mysql

jobs:
  validate-environment:
    name: Validate Environment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Verify Laravel version
        run: |
          LARAVEL_VERSION=$(composer show laravel/framework | grep 'versions' | grep -oP '\d+\.\d+\.\d+')
          if [[ "$LARAVEL_VERSION" < "10.0.0" ]]; then
            echo "::error::Laravel version $LARAVEL_VERSION is below minimum required version 10.0.0"
            exit 1
          fi

      - name: Check required secrets
        run: |
          if [ -z "${{ secrets.APP_KEY }}" ]; then echo "::error::APP_KEY not set"; exit 1; fi
          if [ -z "${{ secrets.DB_HOST }}" ]; then echo "::error::DB_HOST not set"; exit 1; fi
          if [ -z "${{ secrets.DB_DATABASE }}" ]; then echo "::error::DB_DATABASE not set"; exit 1; fi
          if [ -z "${{ secrets.DB_USERNAME }}" ]; then echo "::error::DB_USERNAME not set"; exit 1; fi
          if [ -z "${{ secrets.DB_PASSWORD }}" ]; then echo "::error::DB_PASSWORD not set"; exit 1; fi

      - name: Generate app URL
        run: echo "FULL_APP_URL=https://${{ secrets.APP_SUBDOMAIN }}.${{ secrets.PRIMARY_DOMAIN }}" >> $GITHUB_ENV

  tests:
    name: Run Tests (PHP ${{ matrix.php }})
    needs: validate-environment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: ['8.2', '8.3']
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: mbstring, ctype, fileinfo, pdo, mysql, tokenizer
          coverage: none
          ini-values: memory_limit=2G

      - name: Wait for MySQL
        run: |
          for i in {1..10}; do
            if mysqladmin ping -h"127.0.0.1" -uroot -psecret --silent; then
              echo "MySQL ready"
              break
            fi
            sleep 5
          done

      - name: Setup test environment
        run: |
          cp .env.example .env
          echo "APP_ENV=testing" >> .env
          echo "APP_KEY=base64:$(openssl rand -base64 32)" >> .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=test_db" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=secret" >> .env

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction

      - name: Run migrations
        run: php artisan migrate:fresh --force

      - name: Execute tests
        run: php artisan test

  deploy:
    name: Deploy to Production
    needs: tests
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, ctype, fileinfo, pdo, mysql, tokenizer
          ini-values: memory_limit=2G

      - name: Install dependencies
        run: |
          composer install --no-dev --prefer-dist --no-progress --optimize-autoloader
          composer dump-autoload -o

      - name: Setup production environment
        run: |
          cp .env.example .env
          echo "APP_ENV=production" >> .env
          echo "APP_DEBUG=false" >> .env
          echo "APP_URL=${{ env.FULL_APP_URL }}" >> .env
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

      - name: Configure SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Deploy to server
        run: |
          rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            --exclude=.git \
            --exclude=.env \
            --exclude=storage \
            . ${{ secrets.CPANEL_USERNAME }}@${{ secrets.CPANEL_HOST }}:${{ secrets.CPANEL_DEPLOY_PATH }}/

      - name: Update environment file
        run: |
          scp -o StrictHostKeyChecking=no .env ${{ secrets.CPANEL_USERNAME }}@${{ secrets.CPANEL_HOST }}:${{ secrets.CPANEL_DEPLOY_PATH }}/.env

      - name: Set permissions
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.CPANEL_USERNAME }}@${{ secrets.CPANEL_HOST }} \
            "cd ${{ secrets.CPANEL_DEPLOY_PATH }} && \
             chmod -R 755 storage bootstrap/cache"

      - name: Run migrations
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.CPANEL_USERNAME }}@${{ secrets.CPANEL_HOST }} \
            "cd ${{ secrets.CPANEL_DEPLOY_PATH }} && \
             php artisan migrate --force"

      - name: Verify deployment
        run: |
          curl -s ${{ env.FULL_APP_URL }}/health-check | grep -q '"status":"ok"' || \
          (echo "::error::Deployment verification failed" && exit 1)
